// Pages/People.razor
@page "/people"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using System.Net.Http
@using Frontend.Models.Dto

<h3>Personen</h3>

<div style="display:flex; gap:.5rem; margin-bottom:.5rem">
  <input @bind="nameFilter" placeholder="Name (optional)" />
  <button @onclick="LoadPeople">Laden</button>
</div>

<table style="width:100%; border-collapse:collapse">
  <thead>
    <tr><th>Id</th><th>Vorname</th><th>Nachname</th><th>Geburtsdatum</th></tr>
  </thead>
  <tbody>
    @if (people.Count == 0)
    {
      <tr><td colspan="4"><em>Keine Daten</em></td></tr>
    }
    else
    {
      @foreach (var p in people)
      {
        <tr>
          <td>@p.Id</td>
          <td>@p.Vorname</td>
          <td>@p.Nachname</td>
          <td>@(p.Geburtsdatum?.ToString("yyyy-MM-dd") ?? "-")</td>
        </tr>
      }
    }
  </tbody>
</table>

@code {
  private string? nameFilter;
  private List<PersonDto> people = new();

  // For now: fake data so we can see the UI working
  private Task LoadPeople()
  {
    people = new()
    {
      new() { Id = Guid.NewGuid(), Vorname = "Anna", Nachname = "Muster", Geburtsdatum = new DateTime(1990,1,1) },
      new() { Id = Guid.NewGuid(), Vorname = "Ben", Nachname = "Beispiel" },
    };

    // Simple client-side filter to mimic backend
    if (!string.IsNullOrWhiteSpace(nameFilter))
    {
      var n = nameFilter.Trim().ToLowerInvariant();
      people = people
        .Where(p => (p.Vorname + " " + p.Nachname).ToLowerInvariant().Contains(n))
        .ToList();
    }
    return Task.CompletedTask;
  }
}
