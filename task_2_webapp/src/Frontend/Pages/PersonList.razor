@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Frontend.Models.Dto
@using Frontend.Services

@page "/"
@rendermode InteractiveServer
@inject PersonService PersonService

<PageTitle>Personenverwaltung</PageTitle>

<div class="container">
    <div class="header">
        <h1>Personendaten-Verwaltung</h1>
        <p>Verwaltung von Personendaten mit Anschriften und Telefonnummern</p>
    </div>

    <div class="main-content">
        @if (!string.IsNullOrEmpty(statusMessage)){
            <div id="statusMessage" class="status-message @statusType">
                @statusMessage
            </div>
        }

        <div class="search-section">
            <div class="search-form">
                <div class="form-group">
                    <label for="searchName">Name (optional):</label>
                    <input type="text"
                           id="searchName" 
                           placeholder="Suchkriterium eingeben..." 
                           @bind="searchText"
                           @bind:event="oninput" />
                </div>
                <button type="submit" class="btn btn-seed" 
                    @onclick="() => { _cts?.Cancel(); _cts = new (); return SearchPersons(_cts.Token); }">
                    Personen laden</button>
            </div>
        </div>

        <div class="results-section">
            <div class="results-header">
                <h2>Ergebnisse</h2>
                <span class="results-count">@($"{persons.Count} Personen gefunden")</span>
            </div>

            <div class="table-container">
                @if (isLoading)
                {
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>Lade Personendaten...</p>
                    </div>
                }
                else if (persons.Count == 0)
                {
                    <div class="empty-state">
                        <div style="font-size: 4em; margin-bottom: 20px; opacity: 0.5;">&#128101;</div>
                        <h3>Keine Personen gefunden</h3>
                        <p>Klicken Sie auf "Personen laden" oder "Testdaten generieren".</p>
                    </div>
                }
                else
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Nr</th>
                                <th>Name</th>
                                <th>Vorname</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var index = 1;
                            }
                            @foreach (var person in persons)
                            {
                                var rowNumber = index;
                                <tr @onclick="() => EditPerson(person)" style="cursor:pointer" @key="person.Id">
                                    <td>@rowNumber</td>
                                    <td>@person.Vorname</td>
                                    <td>@person.Nachname</td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@if (selectedPerson != null && isDialogVisible)
{
    <Dialog Person="selectedPerson" 
            IsVisible="isDialogVisible"
            OnSave="SavePerson" 
            OnClose="CloseDialog" />
}

@if (isLoadingDetails)
{
    <div class="loading"><div class="spinner"></div><p>Lade Personendetails...</p></div>
}

@code {
    private string searchText = string.Empty;
    private List<PersonDto> persons = new();
    private PersonDto? selectedPerson;
    private bool isDialogVisible = false;
    private bool isLoading =false;
    private bool isLoadingDetails = false;
    private string statusMessage = string.Empty;
    private string statusType = "success"; // e.g., success | error | info
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        // await SearchPersons(_cts.Token);
    }

    public void Dispose(){
        _cts?.Cancel();
        _cts?.Dispose();
    }

    private async Task SearchPersons(CancellationToken ct)
    {
        try{
            isLoading = true;
            StateHasChanged();
            await Task.Delay(200, ct);

            if (!string.IsNullOrWhiteSpace(searchText)){
                // Personenliste laden (mit Suchtext) – ruft die API über PersonService auf
                persons = await PersonService.GetPersonsByNameAsync(searchText, ct) ?? new List<PersonDto>();
            }
            else{
                // Personenliste laden (ohne Suchtext) – ruft die API über PersonService auf
                persons = await PersonService.GetAllPersonsAsync() ?? new List<PersonDto>();
            }

            ShowStatus($"{persons.Count} Person(en) gefunden", "success");
        } 
        catch (OperationCanceledException) {}
        catch (Exception ex) 
        {
            ShowStatus($"Fehler beim Laden: {ex.Message}", "error");
        }
        finally{
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EditPerson(PersonDto person)
    {
        isLoadingDetails = true;
        StateHasChanged();

        // Holt Detaildaten (inkl. Adressen/Telefonnummern) vom Backend
        var details = await PersonService.GetPersonDetailsAsync(person.Id, _cts?.Token ?? CancellationToken.None);
        isLoadingDetails = false;
        if (details is null){
            ShowStatus("Details konnten nicht geladen werden.", "error");
            return;
        }
        // Anschriften + Telefonverbindungen are populated        
        selectedPerson = details;
        isDialogVisible = true;
        StateHasChanged();
    }

    private async Task SavePerson(PersonDto updatedPerson){
        try
        {
            // Lokale Liste aktualisieren (optimistic UI)
            var idx = persons.FindIndex(p => p.Id == updatedPerson.Id);
            if (idx >= 0){
                persons[idx] = updatedPerson;
            }

            // PersonDto -> UpdatePersonDetailsRequest mappen
            var request = new UpdatePersonDetailsRequest{
                Vorname = updatedPerson.Vorname,
                Nachname = updatedPerson.Nachname,
                Geburtsdatum = updatedPerson.Geburtsdatum,
                Anschriften = updatedPerson.Anschriften?.Select(a => new AddressDto{
                    Id = a.Id,
                    PersonId = a.PersonId,
                    Strasse = a.Strasse,
                    Hausnummer = a.Hausnummer,
                    Postleitzahl = a.Postleitzahl,
                    Ort = a.Ort
                }).ToList() ?? new(),
                Telefonverbindungen = updatedPerson.Telefonverbindungen?.Select(p => new PhoneDto{
                    Id = p.Id,
                    PersonId = p.PersonId,
                    Telefonnummer = p.Telefonnummer
                }).ToList() ?? new()
            };

            // Änderungen speichern – baut UpdatePersonDetailsRequest und ruft PUT /details/{id}
            var updatedDetails=
                await PersonService.UpdatePersonDetailsAsync(updatedPerson.Id, request, _cts?.Token ?? CancellationToken.None);

            if (updatedDetails is not null)
            {
                var uiItem = persons.FirstOrDefault(p => p.Id == updatedDetails.Id);
                if (uiItem is not null)
                {
                    uiItem.Vorname = updatedDetails.Vorname;
                    uiItem.Nachname = updatedDetails.Nachname;
                    uiItem.Geburtsdatum = updatedDetails.Geburtsdatum;
                    uiItem.Anschriften = updatedDetails.Anschriften?.Select(a => new AddressDto
                    {
                        Id = a.Id, PersonId = a.PersonId, Strasse = a.Strasse,
                        Hausnummer = a.Hausnummer, Postleitzahl = a.Postleitzahl, Ort = a.Ort
                    }).ToList() ?? new();
                    uiItem.Telefonverbindungen = updatedDetails.Telefonverbindungen?.Select(p => new PhoneDto
                    {
                        Id = p.Id, PersonId = p.PersonId, Telefonnummer = p.Telefonnummer
                    }).ToList() ?? new();
                }
            }
            isDialogVisible = false;
            selectedPerson = null;
            await InvokeAsync(StateHasChanged);
            ShowStatus("Änderungen gespeichert.", "success");
        }
        catch (OperationCanceledException) {}
        catch (Exception ex) 
        {
            ShowStatus($"Fehler beim Speichern: {ex.Message}", "error");
        }
    }

    private void CloseDialog()
    {
        isDialogVisible = false;
        selectedPerson = null;
    }
    private void ShowStatus(string message, string type)
    {
        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        statusMessage = message;
        statusType = type;
        StateHasChanged();

        if (type == "success")
        {
            _ = DismissStatusAfterDelay(_cts.Token);
        }
    }

    private async Task DismissStatusAfterDelay(CancellationToken ct)
    {
        try
        {
            await Task.Delay(3000, ct);
            if (ct.IsCancellationRequested) return;

            statusMessage = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException) { }
    }
}
