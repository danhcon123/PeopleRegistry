@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Frontend.Models.Dto
@using Frontend.Services

@page "/"
@rendermode InteractiveServer
@inject PersonService PersonService

<PageTitle>Personenverwaltung</PageTitle>

<div class="container">
    <div class="header">
        <h1>Personendaten-Verwaltung</h1>
        <p>Verwaltung von Personendaten mit Anschriften und Telefonnummern</p>
    </div>

    <div class="main-content">
        @if (!string.IsNullOrEmpty(statusMessage)){
            <div id="statusMessage" class="status-message">
                @statusMessage
            </div>
        }

        <div class="search-section">
            <div class="search-form">
                <div class="form-group">
                    <label for="searchName">Name (optional):</label>
                    <input type="text"
                           id="searchName" 
                           placeholder="Suchkriterium eingeben..." 
                           @bind="searchText"
                           @bind:event="oninput" />
                </div>
                <button type="submit" class="btn btn-primary" @onclick="SearchPersons">Personen laden</button>
                <button type="button" id="seedData" class="btn btn-seed" @onclick="GenerateTestData">Testdaten generieren</button>
            </div>
        </div>

        <div class="results-section">
            <div class="results-header">
                <h2>Ergebnisse</h2>
                <span class="results-count">@($"{persons.Count} Personen gefunden")</span>
            </div>

            <div class="table-container">
                @if (isLoading)
                {
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>Lade Personendaten...</p>
                    </div>
                }
                else if (persons.Count == 0)
                {
                    <div class="empty-state">
                        <div style="font-size: 4em; margin-bottom: 20px; opacity: 0.5;">&#128101;</div>
                        <h3>Keine Personen gefunden</h3>
                        <p>Klicken Sie auf "Personen laden" oder "Testdaten generieren".</p>
                    </div>
                }
                else
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Nr</th>
                                <th>Name</th>
                                <th>Vorname</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var index = 1;
                            }
                            @foreach (var person in persons)
                            {
                                var rowNumber = index;
                                <tr @onclick="() => EditPerson(person)" style="cursor:pointer" @key="person.Id">
                                    <td>@rowNumber</td>
                                    <td>@person.Vorname</td>
                                    <td>@person.Nachname</td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@if (selectedPerson != null && isDialogVisible)
{
    <Dialog Person="selectedPerson" 
            IsVisible="isDialogVisible"
            OnSave="SavePerson" 
            OnClose="CloseDialog" />
}

@code {
    private PersonService person_service;
    private string searchText = string.Empty;
    private List<PersonDto> persons = new();
    private PersonDto? selectedPerson;
    private bool isDialogVisible = false;
    private bool isLoading =false;
    private string statusMessage = string.Empty;
    private string statusType = "success"; // e.g., success | error | info

    protected override async Task OnInitializedAsync()
    {
        await SearchPersons();
    }
    private async Task SearchPersons()
    {
        try{
            isLoading = true;
            StateHasChanged();
            await Task.Delay(200);

            if (!string.IsNullOrWhiteSpace(searchText)){
                persons = await PersonService.GetPersonsByNameAsync(searchText) ?? new List<PersonDto>();
            }
            else{
                persons = await PersonService.GetAllPersonsAsync() ?? new List<PersonDto>();
            }

            ShowStatus($"{persons.Count} Person(en) gefunden", "success");
        } 
        catch (Exception ex) 
        {
            ShowStatus($"Fehler beim Laden: {ex.Message}", "error");
        }
        finally{
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateTestData()
    {
        try
        {
            ShowStatus("Generiere Testdaten ...", "info");
            isLoading = true;
            StateHasChanged();

            await Task.Delay(300); // simulate I/O

            persons = GenerateMockPersons(20);
            ShowStatus($"{persons.Count} Testdatensaetze erfolgreich generiert!", "success");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

        private static List<PersonDto> GenerateMockPersons(int count)
    {
        var germanFirstNames = new[] { "Hans", "Anna", "Klaus", "Maria", "Peter", "Petra", "Michael", "Sabine", "Thomas", "Andrea", "Wolfgang", "Monika", "Stefan", "Karin", "Juergen" };
        var germanLastNames  = new[] { "Mueller", "Schmidt", "Schneider", "Fischer", "Weber", "Meyer", "Wagner", "Becker", "Schulz", "Hoffmann", "Koch", "Bauer", "Richter", "Klein", "Wolf" };
        var streets = new[] { "Hauptstraße", "Bahnhofstraße", "Kirchstraße", "Gartenstraße", "Schulstraße" };
        var cities  = new[] { "Berlin", "Hamburg", "Muenchen", "Koeln", "Frankfurt" };
        var plzs    = new[] { "10115", "20095", "80331", "50667", "60311" };

        var random = new Random();
        var mockPersons = new List<PersonDto>();

        for (int i = 0; i < count; i++)
        {
            var person = new PersonDto
            {
                Id = Guid.NewGuid(),
                Vorname = germanFirstNames[random.Next(germanFirstNames.Length)],
                Nachname = germanLastNames[random.Next(germanLastNames.Length)],
                Geburtsdatum = DateTime.UtcNow.AddYears(-random.Next(20, 70)).Date,
                Addresses = new List<AddressDto>(),
                Phones = new List<PhoneDto>()
            };

            // 1–2 addresses
            var addrCount = random.Next(1, 3);
            for (int j = 0; j < addrCount; j++)
            {
                person.Addresses.Add(new AddressDto
                {
                    Id = Guid.NewGuid(),
                    PersonId = person.Id,
                    Strasse = streets[random.Next(streets.Length)],
                    Hausnummer = random.Next(1, 200).ToString(),
                    Postleitzahl = plzs[random.Next(plzs.Length)],
                    Ort = cities[random.Next(cities.Length)]
                });
            }

            // 1–3 phones
            var phoneCount = random.Next(1, 4);
            for (int j = 0; j < phoneCount; j++)
            {
                person.Phones.Add(new PhoneDto
                {
                    Id = Guid.NewGuid(),
                    PersonId = person.Id,
                    Telefonnummer = $"+49{random.Next(100, 1000)}{random.Next(1_000_000, 10_000_000)}"
                });
            }

            mockPersons.Add(person);
        }

        return mockPersons;
    }

    private void EditPerson(PersonDto person)
    {
        selectedPerson = new PersonDto{
            Id = person.Id,
            Vorname = person.Vorname,
            Nachname = person.Nachname,
            Geburtsdatum = person.Geburtsdatum,
            Addresses = person.Addresses.Select(a => new AddressDto{
                Id = a.Id,
                PersonId = a.PersonId,
                Strasse = a.Strasse,
                Hausnummer = a.Hausnummer,
                Postleitzahl = a.Postleitzahl,
                Ort = a.Ort
            }).ToList(),
            Phones = person.Phones.Select(p => new PhoneDto{
                Id = p.Id,
                PersonId = p.PersonId,
                Telefonnummer = p.Telefonnummer
            }).ToList()
        };

        isDialogVisible = true;
    }

    private async Task SavePerson(PersonDto updatedPerson){
        try
        {
            var idx = persons.FindIndex(p => p.Id == updatedPerson.Id);
            if (idx >= 0){
                persons[idx] = updatedPerson;
            }

            await PersonService.UpdatePersonAsync(updatedPerson);
            isDialogVisible = false;
            selectedPerson = null;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex) 
        {
            ShowStatus($"Fehler beim Speichern: {ex.Message}", "error");
        }
    }

    private void CloseDialog()
    {
        isDialogVisible = false;
        selectedPerson = null;
    }
    private void ShowStatus(string message, string type)
    {
        statusMessage = message;
        statusType = type;
        StateHasChanged();

        if (type == "success")
        {
            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                statusMessage = string.Empty;
                await InvokeAsync(StateHasChanged);
            });
        }
    }
}
